import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';
import { AlertCircle, ThumbsUp, MessageSquare, BarChart as ChartIcon } from 'lucide-react';

const questionSets = {
  energy: [
    {
      text: "Which renewable energy source has the most potential for widespread adoption in Bangladesh?",
      options: ["Solar", "Wind", "Biomass", "Hydroelectric"]
    },
    {
      text: "What's the biggest challenge for implementing solar home systems in rural Bangladesh?",
      options: ["Initial Costs", "Lack of Awareness", "Maintenance Issues", "Limited Government Support"]
    },
    {
      text: "Which sector in Bangladesh should prioritize transitioning to renewable energy?",
      options: ["Textile Industry", "Agriculture", "Transportation", "Residential"]
    }
  ],
  waste: [
    {
      text: "What's the most pressing waste management issue in Dhaka?",
      options: ["Plastic Pollution", "E-waste", "Industrial Waste", "Organic Waste"]
    },
    {
      text: "Which approach would be most effective for reducing plastic waste in Bangladesh?",
      options: ["Banning Single-use Plastics", "Improved Recycling Infrastructure", "Consumer Education", "Producer Responsibility"]
    },
    {
      text: "What's the biggest opportunity for creating value from waste in Bangladesh?",
      options: ["Composting", "Waste-to-Energy", "Upcycling", "Extended Producer Responsibility"]
    }
  ],
  agriculture: [
    {
      text: "Which sustainable farming practice is most crucial for Bangladesh's future food security?",
      options: ["Organic Farming", "Precision Agriculture", "Agroforestry", "Aquaponics"]
    },
    {
      text: "What's the main barrier to adopting climate-resilient crop varieties in Bangladesh?",
      options: ["Lack of Research", "High Costs", "Farmer Resistance", "Inadequate Distribution"]
    },
    {
      text: "Which export crop in Bangladesh has the most potential for sustainable production?",
      options: ["Tea", "Jute", "Shrimp", "Vegetables"]
    }
  ],
  textiles: [
    {
      text: "What's the most effective way to reduce water pollution from textile industries in Bangladesh?",
      options: ["Stricter Regulations", "Water Recycling Technologies", "Eco-friendly Dyes", "Consumer Pressure"]
    },
    {
      text: "Which sustainable practice would have the biggest impact on Bangladesh's garment industry?",
      options: ["Renewable Energy Use", "Ethical Labor Practices", "Sustainable Materials", "Waste Reduction"]
    },
    {
      text: "What's the main challenge for implementing a circular economy in Bangladesh's textile sector?",
      options: ["Lack of Technology", "Consumer Behavior", "Supply Chain Complexity", "Economic Constraints"]
    }
  ]
};

const BangladeshGreenBusinessGame = () => {
  const [gameStage, setGameStage] = useState('intro'); // intro, playing, result
  const [selectedSet, setSelectedSet] = useState('');
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState([]);
  const [comments, setComments] = useState([]);
  const [playerName, setPlayerName] = useState('');
  const [otherResponses, setOtherResponses] = useState([]);

  useEffect(() => {
    if (selectedSet) {
      setAnswers(Array(questionSets[selectedSet].length).fill(null));
      setComments(Array(questionSets[selectedSet].length).fill(''));
      // Simulated data for other responses
      setOtherResponses(questionSets[selectedSet].map(() => 
        Array(4).fill().map(() => Math.floor(Math.random() * 100))
      ));
    }
  }, [selectedSet]);

  const handleAnswer = (index) => {
    const newAnswers = [...answers];
    newAnswers[currentQuestion] = index;
    setAnswers(newAnswers);
  };

  const handleComment = (comment) => {
    const newComments = [...comments];
    newComments[currentQuestion] = comment;
    setComments(newComments);
  };

  const nextQuestion = () => {
    if (currentQuestion < questionSets[selectedSet].length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      setGameStage('result');
      saveResults();
    }
  };

  const saveResults = () => {
    // In a real application, you would send this data to a server
    const results = {
      playerName,
      timestamp: new Date().toISOString(),
      category: selectedSet,
      answers: answers.map((answer, index) => ({
        question: questionSets[selectedSet][index].text,
        answer: questionSets[selectedSet][index].options[answer],
        comment: comments[index]
      }))
    };
    console.log("Saved results:", results);
    // Here you would typically make an API call to save the data
  };

  const restartGame = () => {
    setGameStage('intro');
    setSelectedSet('');
    setCurrentQuestion(0);
    setAnswers([]);
    setComments([]);
  };

  const calculateAgreementPercentage = () => {
    let totalAgreement = 0;
    answers.forEach((answer, index) => {
      if (answer !== null) {
        totalAgreement += otherResponses[index][answer];
      }
    });
    return (totalAgreement / (questionSets[selectedSet].length * 100)).toFixed(1);
  };

  const renderIntro = () => (
    <div className="space-y-4">
      <h2 className="text-2xl font-bold text-center">Welcome to the Bangladesh Green Business Debate!</h2>
      <Input
        placeholder="Enter your name"
        value={playerName}
        onChange={(e) => setPlayerName(e.target.value)}
        className="mb-4"
      />
      <Select onValueChange={setSelectedSet}>
        <SelectTrigger>
          <SelectValue placeholder="Choose a topic" />
        </SelectTrigger>
        <SelectContent>
          <SelectItem value="energy">Renewable Energy</SelectItem>
          <SelectItem value="waste">Waste Management</SelectItem>
          <SelectItem value="agriculture">Sustainable Agriculture</SelectItem>
          <SelectItem value="textiles">Sustainable Textiles</SelectItem>
        </SelectContent>
      </Select>
      <Button 
        onClick={() => setGameStage('playing')} 
        disabled={!playerName || !selectedSet}
        className="w-full"
      >
        Start Game
      </Button>
    </div>
  );

  const renderQuestion = () => (
    <div className="space-y-4">
      <h2 className="text-xl font-semibold mb-4">{questionSets[selectedSet][currentQuestion].text}</h2>
      <div className="space-y-2">
        {questionSets[selectedSet][currentQuestion].options.map((option, index) => (
          <Button
            key={index}
            onClick={() => handleAnswer(index)}
            className={`w-full justify-start ${
              answers[currentQuestion] === index
                ? 'bg-green-500 hover:bg-green-600'
                : 'bg-blue-500 hover:bg-blue-600'
            }`}
          >
            {option}
          </Button>
        ))}
      </div>
      <Textarea
        placeholder="Share your thoughts on this question (optional)"
        value={comments[currentQuestion]}
        onChange={(e) => handleComment(e.target.value)}
        className="mt-4"
      />
    </div>
  );

  const renderResult = () => (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold text-center">Results</h2>
      <div className="flex items-center justify-center space-x-2">
        <ThumbsUp className="text-green-500" />
        <p className="text-xl">{calculateAgreementPercentage()}% of participants agree with your views on average.</p>
      </div>
      <ResponsiveContainer width="100%" height={300}>
        <BarChart data={questionSets[selectedSet].map((q, i) => ({
          name: `Q${i+1}`,
          'Your Answer': answers[i] !== null ? otherResponses[i][answers[i]] : 0,
          'Others': Math.max(...otherResponses[i]) - (answers[i] !== null ? otherResponses[i][answers[i]] : 0)
        }))}>
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis dataKey="name" />
          <YAxis />
          <Tooltip />
          <Bar dataKey="Your Answer" fill="#82ca9d" />
          <Bar dataKey="Others" fill="#8884d8" />
        </BarChart>
      </ResponsiveContainer>
      <div className="space-y-4">
        <h3 className="text-xl font-semibold">Your Responses:</h3>
        {questionSets[selectedSet].map((q, i) => (
          <div key={i} className="bg-gray-100 p-4 rounded-md">
            <p className="font-semibold">{q.text}</p>
            <p>Your answer: {q.options[answers[i]]}</p>
            {comments[i] && (
              <div className="mt-2">
                <p className="font-semibold">Your comment:</p>
                <p>{comments[i]}</p>
              </div>
            )}
          </div>
        ))}
      </div>
      <Button onClick={restartGame} className="w-full bg-green-500 hover:bg-green-600">
        Play Again
      </Button>
    </div>
  );

  return (
    <div className="flex justify-center items-center min-h-screen bg-gradient-to-r from-green-400 to-blue-500 p-4">
      <Card className="w-full max-w-3xl shadow-xl">
        <CardHeader>
          <CardTitle className="text-2xl font-bold text-center text-green-700">Bangladesh Green Business Debate</CardTitle>
          <CardDescription className="text-center text-gray-600">
            Share your insights on sustainable practices in Bangladesh!
          </CardDescription>
        </CardHeader>
        <CardContent>
          {gameStage === 'intro' && renderIntro()}
          {gameStage === 'playing' && renderQuestion()}
          {gameStage === 'result' && renderResult()}
        </CardContent>
        {gameStage === 'playing' && (
          <CardFooter className="flex justify-between items-center">
            <Progress value={(currentQuestion + 1) / questionSets[selectedSet].length * 100} className="w-1/3" />
            <Button onClick={nextQuestion} disabled={answers[currentQuestion] === null}>
              {currentQuestion < questionSets[selectedSet].length - 1 ? 'Next' : 'Finish'}
            </Button>
          </CardFooter>
        )}
      </Card>
    </div>
  );
};

export default BangladeshGreenBusinessGame;
